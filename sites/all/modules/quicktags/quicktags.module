<?php
// $Id: quicktags.module,v 1.22.2.2 2008/02/12 21:07:20 tcblack Exp $

/**
 * Implementation of hook_help().
 */
function quicktags_help($section) {
  switch($section) {
    case 'admin/modules#description':
      return t('Allows Drupal to use quicktags around the textarea for easier user input');
  }
}

/**
 * Implementation of hook_perm().
 */
function quicktags_perm() {
  return array('use quicktags');
}

/**
 * Implementation of hook_settings().
 */
function quicktags_settings() {

  $form['quicktags_options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Quicktags options'),
  );
  $form['quicktags_options']['quicktags_show'] = array(
    '#type' => 'radios',
    '#title' => t('Show quicktags'),
    '#default_value' => variable_get('quicktags_show', 0),
    '#options' => array(0 => t('Everywhere'), 1 => t('Only nodes'), 2 => t('Nodes and comments')),
    '#description' => t('Where to show the quicktags toolbar.'),
  );

  return system_settings_form($form);
}

/**
 * Implementation of hook_menu().
 */
function quicktags_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array(
      'path' => 'quicktags',
      'callback' => 'quicktags_javascript',
      'access' => TRUE,
      'type' => MENU_CALLBACK
    );
    $items[] = array(
      'path' => 'admin/settings/quicktags',
      'title' => t('Quicktags'),
      'description' => t('Configure Quicktags options.'),
      'callback' => 'drupal_get_form',
      'callback arguments' => 'quicktags_settings',
      'access' => user_access('administer site configuration'),
    );
  }

  return $items;
}

/**
 * Implementation of hook_elements().
 */
function quicktags_elements() {
  $type = array();

  // Check to see if quicktags should show or not.
  if (quicktags_show_quicktags()) {
    // Set resizable to false to avoid drupal.js resizable function from taking control of the textarea
    $type['textarea'] = array(
//      '#resizable' => FALSE,
      '#theme' => 'quicktags_textfield',
    );
  }

  return $type;
}

/**
 * Function to evalutate if quicktags should show or not.
 * Returns TRUE or FALSE.
 */
function quicktags_show_quicktags() {
  if (user_access('use quicktags')) {
    switch (variable_get('quicktags_show', 0)) {
      case 0:
        return TRUE;
        break;
      case 1:
        if (arg(0) == 'node' && (arg(1) == 'add' || arg(2) == 'edit')) {
          return TRUE;
        }
        break;
      case 2:
        if (arg(0) == 'node' || arg(0) == 'comment') {
          return TRUE;
        }
        break;
      default:
        return FALSE;
    }
  }
  else {
    return FALSE;
  }
}

/**
 * Attach quicktags to a textarea
 */
function theme_quicktags_textfield($element) {
  static $ta_count = 0;

  $path = drupal_get_path('module','quicktags');

  //Add the stylesheet
  $stylesheet =  $path .'/quicktags.css';
  drupal_add_css($stylesheet);

  //Add the static file
  $javascript = $path .'/quicktags.js';
  drupal_add_js($javascript);

  //Add the dynamically generated file
  drupal_add_js('?q=quicktags');
  //using cache = FALSE might seem a good option, but this breaks on the menu.

  $cols = ($element['#cols'] ? ' cols="'. $element['#cols'] .'"' : '');
  $class[] = ($element['#attributes']['class'] ? $element['#attributes']['class'] : 'form-textarea');
  if ($element['#resizable'] !== false) {
    drupal_add_js('misc/textarea.js');
    $class[] = 'resizable';
  }

  _form_set_class($element, $class);

  $html = '<script language="JavaScript" type="text/javascript">edToolbar('. $ta_count .');</script>';
  $html .= '<textarea'. $cols .' rows="'. $element['#rows'] .'" name="'. $element['#name'] .'" id="'. $element['#id'] .'" '. drupal_attributes($element['#attributes']) .'>';
  $html .= check_plain($element['#value']);
  $html .= '</textarea>';
  $html .= '<script language="JavaScript" type="text/javascript">
    <!--
      edCanvas[' . $ta_count . '] = document.getElementById(\''.$element['#id'] .'\');
    //-->
  </script>';
  $ta_count++;

  return theme('form_element', $element, $html);
}



/* array(id, display, tagStart, tagEnd, access, open, location)
 * id;         // used to name the toolbar button
 * display;    // label on button
 * tagStart;   // open tag
 * tagEnd;     // close tag
 * access;     // access key
 * open;       // set to -1 if tag does not need to be closed
 * location;   // optional: onclick action omit the ().
*/
function quicktags_quicktags_insert() {
  $path = base_path() . drupal_get_path('module','quicktags') .'/';

  $items = array(
    'ed_italic' => array(
      'name' => 'italic',
      'prefix' => '<em>',
      'suffix' => '</em>',
      'accesskey' => 'i',
      'weight' => 10,
      'icon' => $path .'ed_italic.png',
    ),
    'ed_bold' => array(
      'name' => 'bold',
      'prefix' => '<strong>',
      'suffix' => '</strong>',
      'accesskey' => 'b',
      'weight' => 20,
      'icon' => $path .'ed_bold.png',
    ),
    'ed_code' => array(
      'name' => 'code',
      'prefix' => '<code>',
      'suffix' => '</code>',
      'accesskey' => 'c',
      'weight' => 30,
      'icon' => $path .'ed_code.png',
    ),
    'ed_block' => array(
      'name' => 'blockquote',
      'prefix' =>'<blockquote>',
      'suffix' => '</blockquote>',
      'accesskey' => 'q',
      'weight' => 40,
      'icon' => $path .'ed_block.png',
    ),
    'ed_link' => array(
      'name' => 'link',
      'prefix' =>'<a href="http://">',
      'suffix' => '</a>',
      'accesskey' => 'l',
      'weight' => 50,
      'icon' => $path .'ed_link.png',
    ),
    'ed_break' => array(
      'name' => 'teaser break',
      'prefix' =>'<!--break-->',
      'accesskey' => 't',
      'weight' => 60,
      'close' => FALSE,
      'icon' => $path .'ed_break.png',
    ),
  );

  return $items;
}

function quicktags_javascript() {
  $output = '';
  $items = array();
  $items = module_invoke_all('quicktags_insert');
  $items = array_merge($items, module_invoke_all('quicktags_alter', $items));
  uasort($items, '_quicktags_sort');

  $js = quicktags_javascript_prepare($items);

  foreach ($items as $id => $item) {
    //build the arglist to pass to JS
    // id, display, tagStart, tagEnd, access, open, location, icon
    $args = '\''. $id .'\',\''. $item['name'] .'\',\''. $item['prefix'] .'\',\''. $item['suffix'] .'\',\''. $item['accesskey'] .'\',\''. ($item['close'] ? 0 : -1) .'\',\''. $item['location'] .'\',\''.$item['icon'] .'\'';

    $output .= "edButtons[edButtons.length] = new edButton(". $args  .");\n" ;
  }

  if($output) {
    drupal_set_header('Content-Type: text/javascript; charset=utf-8');
    print $js ."\n". $output;
  }
}

function quicktags_javascript_prepare() {
  $path = base_path() . drupal_get_path('module', 'quicktags');
  $output = <<<EOD
function edToolbar(id) {
  document.write('<div class="ed_toolbar" id="ed_toolbar' + id + '">');
  for (i = 0; i < edButtons.length; i++) {
    edShowButton(edButtons[i], i, id);
  }
  document.write('<a href="javascript:edCloseAllTags(' + id + ');"><img src="$path/ed_close.png" id="ed_close" class="ed_button" title="Close all open tags" alt="Close Tags"/></a>');
  document.write('</div>');
}
EOD;

  return $output;
}

function _quicktags_sort($a, $b) {
  return $a['weight'] < $b['weight'] ? -1 : ($a['weight'] > $b['weight'] ? 1 : ($a['name'] < $b['name'] ? -1 : 1));
}

