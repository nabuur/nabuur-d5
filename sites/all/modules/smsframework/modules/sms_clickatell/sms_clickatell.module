<?php
// $Id: sms_clickatell.module,v 1.1.2.3 2008/08/22 16:22:21 admin Exp $

function sms_clickatell_gateway_info() {
  return array(
    'clickatell' => array(
      'name' => 'Clickatell',
      'configure form' => 'sms_clickatell_admin_form',
      'send' => 'sms_clickatell_send',
      'send form' => 'sms_clickatell_send_form',
      'set_callback' => 'sms_clickatell_set_callback',
    ),
  );
}

function sms_clickatell_set_callback($url) {
//    return sms_clickatell_command('setcallback', array('url' => $url));
}

function sms_clickatell_get_callback() {
//    return sms_clickatell_command('getcallback');
}


function sms_clickatell_admin_form($configuration) {
  $form['sms_clickatell_ssl'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use SSL Encyption'),
    '#description' => t('Drupal\'s built-in HTTP client only supports SSL on PHP 4.3 compiled with OpenSSL.'),
    '#default_value' => $configuration['sms_clickatell_ssl'],
  );
  $form['sms_clickatell_api_id'] = array(
    '#type' => 'textfield',
    '#title' => t('API ID'),
    '#description' => t('Clickatell issues this number upon addition of an HTTP sub-product to your account.'),
    '#size' => 40,
    '#maxlength' => 255,
    '#default_value' => $configuration['sms_clickatell_api_id'],
  );
  $form['sms_clickatell_user'] = array(
    '#type' => 'textfield',
    '#title' => t('User'),
    '#description' => t('The username of your Clickatell account.'),
    '#size' => 40,
    '#maxlength' => 255,
    '#default_value' => $configuration['sms_clickatell_user'],
  );
  $form['sms_clickatell_password'] = array(
    '#type' => 'textfield',
    '#title' => t('Password'),
    '#description' => t('The current password on your Clickatell account.'),
    '#size' => 30,
    '#maxlength' => 64,
    '#default_value' => $configuration['sms_clickatell_password'],
  );
  
  return $form;
}

/**
 * Validates the submission of the configuration form.
 */ 
function sms_clickatell_admin_form_validate($form_id, $form_values) {
  $result = sms_clickatell_command('auth', array(), $form_values);
  $codes = sms_clickatell_error_codes();
  if ($result['status'] == 'ERR') {
    form_set_error('', t('A Clickatell gateway error occured: '. $codes[floor($result['code'])]));
  }
  variable_set('sms_clickatell_session_id_timestamp', 0);
}

/**
 * Returns custom additions to be added to the send forms
 */
function sms_clickatell_send_form() {
  // removed country to internationalise
  // requires user to enter country code
/*  $form['country'] = array(
    '#type' => 'select',
    '#title' => t('Country'),
    '#multiple' => FALSE,
    '#options' => sms_clickatell_country_codes(),
    '#default_value' => -1,
  );
*/$form = array();
  $form['help'] = array('#type' => 'item', '#value' => '<em>'. t('Example') .'</em>:<br />'. t('If you live in Kenya, your country code is 254.') .'<br />'. t('Your mobile number is 0712 345678.') .'<br />'. t('Then you fill in: +254712345678'));
  return $form;
}

/**
 * Callback for sending messages.
 */
function sms_clickatell_send($number, $message, $options) {
  return $result = sms_clickatell_command('sendmsg', array('number' => $number, 'message' => $message));
}

function sms_clickatell_balance() {
  $result = sms_clickatell_command('getbalance');
  return $result['data'];
}

/**
 * Executes a command using the Clickatell API
 */
function sms_clickatell_command($command = 'auth', $data = array(), $config = NULL) {
  $gateway = sms_gateways('gateway', 'clickatell');
    
  if ($config == NULL) {
    $config = $gateway['configuration'];
  }
  
  if ($config['sms_clickatell_ssl']) {
    $scheme = 'https';
  }
  else {
    $scheme = 'http';
  }
  
  switch ($command) {
    case 'auth':
      $query = 'api_id='. $config['sms_clickatell_api_id'] .'&user='. $config['sms_clickatell_user'] .'&password='. $config['sms_clickatell_password'];
      break;
    case 'sendmsg':
      $query = 'session_id='. sms_clickatell_get_session_id() .'&to='. $data['number'] .'&text='. drupal_urlencode($data['message']);
      break;
    case 'getbalance':
      $query = 'session_id='. sms_clickatell_get_session_id();
      break;
  }

  // Run the command
  // drupal_set_message('requesting: '.$scheme .'://api.clickatell.com/http/'. $command .'?'. $query);
  $result = drupal_http_request($scheme .'://api.clickatell.com/http/'. $command .'?'. $query);

  // Check for HTTP errors
  if ($result->error) {
    drupal_set_message(t('An error occured during the HTTP request: '. $result->error), 'error');
    return 0;
  }
  else {
    drupal_set_message(t('SMS message sent'));
  }
  
  if ($result->data) {
    switch ($command) {
      case 'auth':
        list($response['status'], $response['data']) = explode(': ', $result->data);
        $response['code'] = drupal_substr($response['data'], 0, 3);
        $response['message'] = drupal_substr($response['data'], 5, drupal_strlen($response['data']) - 1);
        break;
      case 'sendmsg':
        $response = explode(': ', $result->data);
        break;
      case 'getbalance':
        list($response['status'], $response['data']) = explode(': ', $result->data);
        break;
    }
    
    return $response;
  }
}

function sms_clickatell_get_session_id() {
  if (variable_get('sms_clickatell_session_id_timestamp', 0) < strtotime('-10 mins')) {
    if ($result = sms_clickatell_command()) {
      if ($result['status'] == 'OK') {
        variable_set('sms_clickatell_session_id', $result['data']);
        variable_set('sms_clickatell_session_id_timestamp', time());
        watchdog('sms', t('Clickatell session ID refreshed: '. $result['data']));
      }
    }
  }

  // TODO set and get -- callbacks
  return variable_get('sms_clickatell_session_id', 0);
}

/**
 * Returns an array of error codes and messages that are generated by the Clickatell gateway
 */
function sms_clickatell_error_codes() {
  return array(
    001 => 'Authentication failed', 002 => 'Unknown username or password', 003 => 'Session ID expired',
    004 => 'Account frozen', 005 => 'Missing session ID', 007 => 'IP Lockdown violation',
    101 => 'Invalid or missing parameters', 102 => 'Invalid user data header',
    103 => 'Unknown API message ID', 104 => 'Unknown client message ID',
    105 => 'Invalid destination address', 106 => 'Invalid source address', 107 => 'Empty message',
    108 => 'Invalid or missing API ID', 109 => 'Missing message ID',
    110 => 'Error with email message',
    111 => 'Invalid protocol', 112 => 'Invalid message type',
    113 => 'Maximum message parts exceeded',
    114 => 'Cannot route message',
    115 => 'Message expired',
    116 => 'Invalid Unicode data', 120 => 'Invalid delivery time',
    201 => 'Invalid batch ID', 202 => 'No batch template',
    301 => 'No credit left', 302 => 'Max allowed credit',
  );
}

function sms_clickatell_country_codes() {
  return array(
    1 => 'United States',
  );
}

/**
 * Implementation of sms_$gateway_receive_parse()
 * Tells sms_receive how to parse incoming messages
 */
function sms_clickatell_receive_parse() { // hook for for sms_receive.module
  $result = array();
// MMS  $result['type'] = check_plain($_GET['Type']); // will be 'sms' unless with media
  $result['api_id'] = $_GET['api_id'];
  $result['timestamp'] = $_GET['timestamp']; // no timezone so make unix timestamp?
  $result['charset'] = check_plain($_GET['charset']);
  $result['from'] = check_plain($_GET['from']);
  // check_plain works with UTF-8 incoming isn't usually... 
  // so breaks on some special chacters going into text
  // inconv php >= 4.0.5, 5
  if ($_GET['charset'] !=  'UTF-8') {
    $_GET['text'] = iconv($_GET['charset'], 'UTF-8', $_GET['text']);
  }
  $_GET['text'] = html_entity_decode($_GET['text'], ENT_QUOTES, 'utf-8');
  // no check plain here - going to have to decide depending on field it goes to
  $result['text'] = $_GET['text'];
  $result['to'] = check_plain($_GET['to']);
  $result['msgid'] = check_plain($_GET['moMsgId']);
  return $result;
}

/**
 * Implementation of sms_$gateway_receive_ields()
 * Tells sms_receive what fields are available
 */
function sms_clickatell_receive_fields() {
  return array('from', 'text', 'timestamp', 'charset', 'to', 'msgid');
}

