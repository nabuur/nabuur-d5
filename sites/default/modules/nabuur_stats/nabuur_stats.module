<?php
// $Id: nabuur_stats.module,v 1.1.1.9 2008/09/19 12:46:27 kester Exp $

/**
 * @file
 * Makes and updates stats block for nabuur front page.
 */

/**
 * Implementation of hook_menu.
 */
function nabuur_stats_menu($may_cache) {
  $items = array();
  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/settings/nabuur/stats',
      'title' => t('Nabuur front page statistics block'),
      'description' => t('Setting for the statistics block.'),
      'callback' => 'drupal_get_form',
      'callback arguments' => 'nabuur_stats_settings',
      'access' => user_access('administer site configuration'),
    );
    $items[] = array(
      'path' => 'admin/logs/nabuur/villages/reps',
      'title' => t('Report: Villages, Local Reps and Facilitators'),
      'description' => t('Prints a report of all villages, with their local reps and facilitators names'),
      'callback' => 'nabuur_stats_report_villages_reps',
      'access' => user_access('administer site configuration'),
    );
    $items[] = array(
      'path' => 'admin/logs/nabuur/villages/year',
      'title' => t('Report: Villages active this year'),
      'description' => t('Prints a report of all villages with new (local) content this year'),
      'callback' => 'nabuur_stats_report_villages_year',
      'access' => user_access('administer site configuration'),
    );
    $items[] = array(
      'path' => 'admin/logs/nabuur/task/summary',
      'title' => t('Report: Overview of open tasks'),
      'description' => t('Prints a report of all open tasks'),
      'callback' => 'nabuur_stats_report_tasks_summary',
      'access' => user_access('administer site configuration'),
    );
    $items[] = array(
      'path' => 'admin/logs/nabuur/worldschool/students',
      'title' => t('Report: Overview of worldschool students and posts'),
      'description' => t('Prints a report of worldschool students and posts in worldschool villages'),
      'callback' => 'nabuur_stats_report_worldschool_students',
      'access' => user_access('administer site configuration'),
    );
    $items[] = array(
      'path' => 'nabuur/students',
      'title' => t('Overview of dutch students and posts'),
      'description' => t('Prints a page of dutch students and posts in villages'),
      'callback' => 'nabuur_stats_report_worldschool_students_page',
      'access' => user_access('access content'),
    );
  }
  return $items;
}

function nabuur_stats_report_tasks_summary() {
  $csv = arg(5) == 'csv' ? TRUE : FALSE;
  if ($csv) {
    $output = "'status', 'project', 'created', 'tasks', 'discussion'\n";
  }
  else {
    $output = '<p>'. t('List of <em>public</em> villages with posts this year.'). '</p>';
    $output .= '<p>'. l(t('Download as CSV file.'), 'admin/logs/nabuur/task/summary/csv') .' '. t('This can be opened in a speadsheet with commas seperating the columns.') .'</p>'; // drupal table output...
    $header = array('status', 'project', 'created', 'tasks', 'discussion');
  }

  $query = "SELECT td.name as state, pr.nid, pr.title, pr.created, count(ta.nid) as tasks, sum(di.comment_count) as comments 
            FROM node pr 
            inner join term_node te on pr.nid = te.nid 
            left join term_data td on td.tid = te.tid 
            left join relativity ta on ta.parent_nid = pr.nid 
            left join node_comment_statistics di on ta.nid = di.nid 
            where te.tid in (55, 165, 166) 
            group by pr.nid 
            order by pr.created DESC";
 
  $result = db_query($query);

  $villages = array();
  while ($row = db_fetch_array($result)) {
    if ($csv) {
      $villages[$row['nid']]['state'] = $row['state'];
      $villages[$row['nid']]['title'] = $row['title'];
      $villages[$row['nid']]['created'] = date('c', $row['created']);
      $villages[$row['nid']]['tasks'] = $row['tasks'];
      $villages[$row['nid']]['comments'] = $row['comments'];
    }
    else {
      $villages[$row['nid']]['state'] = $row['state'];
      $villages[$row['nid']]['title'] = l($row['title'], 'node/'. $row['nid']);
      $villages[$row['nid']]['created'] = date('c', $row['created']);
      $villages[$row['nid']]['tasks'] = $row['tasks'];
      $villages[$row['nid']]['comments'] = $row['comments'];
    }
  }

  if ($csv) {
    foreach ($villages as $village) {
      $output .= implode(', ', $village) ."\n";
    }
    drupal_set_header('Content-Type: text/csv');
    print $output;
    exit;
  }
  else {
    $output .= theme('table', $header, $villages);
  }

  return $output;
}

function nabuur_stats_report_villages_year() {
  $csv = arg(5) == 'csv' ? TRUE : FALSE;
  if ($csv) {
    $output = "'started', 'village', 'node count'\n";
  }
  else {
    $output = '<p>'. t('List of <em>public</em> villages with posts this year.'). '</p>';
    $output .= '<p>'. l(t('Download as CSV file.'), 'admin/logs/nabuur/villages/year/csv') .' '. t('This can be opened in a speadsheet with commas seperating the columns.') .'</p>'; // drupal table output...
    $header = array('started', 'village', 'post count');
  }

  $query = "SELECT v.nid, FROM_UNIXTIME(v.created,'%%Y-%%m-%%d ') AS started, v.title, count(n.nid) as posts FROM og_ancestry o 
            INNER JOIN node n ON o.nid = n.nid 
            INNER JOIN node v ON o.group_nid = v.nid 
            WHERE n.created > 1230678000 AND n.type != 'news_feeditem' 
              AND v.status = 1 
            GROUP BY v.nid 
            ORDER BY count(n.nid) DESC";
 
  $result = db_query($query);

  $villages = array();
  while ($row = db_fetch_array($result)) {
    if ($csv) {
      $villages[$row['nid']]['started'] = $row['started'];
      $villages[$row['nid']]['title'] = $row['title'];
      $villages[$row['nid']]['posts'] = $row['posts'];
    }
    else {
      $villages[$row['nid']]['started'] = $row['started'];
      $villages[$row['nid']]['title'] = l($row['title'], 'node/'. $row['nid']);
      $villages[$row['nid']]['posts'] = $row['posts'];
    }
  }

  if ($csv) {
    foreach ($villages as $village) {
      $output .= implode(', ', $village) ."\n";
    }
    drupal_set_header('Content-Type: text/csv');
    print $output;
    exit;
  }
  else {
    $output .= theme('table', $header, $villages);
  }

  return $output;
}

function nabuur_stats_report_villages_reps() {
  $csv = arg(5) == 'csv' ? TRUE : FALSE;
  if ($csv) {
    $output = "'village', 'local rep', 'facilitators'\n";
  }
  else {
    $output = '<p>'. t('List of <em>public</em> villages with their local reps and facilitators.'). '</p>';
    $output .= '<p>'. l(t('Download as CSV file.'), 'admin/logs/nabuur/villages/reps/csv') .' '. t('This can be opened in a speadsheet with commas seperating the columns.') .'</p>'; // drupal table output...
    $header = array('village', 'local rep', 'facilitators');
  }

  $query = "SELECT v.nid as village_nid, v.title as village_title, lr.nid as local_rep_nid, lr.title as local_rep_title, f.nid as facilitator_nid, f.title as facilitator_title"
  ." FROM {node} v"
  ." INNER JOIN {og} og ON og.nid = v.nid AND og.private = 0"
  ." LEFT JOIN {node} lr ON lr.uid = v.uid AND lr.uid != 0 AND lr.type = 'individual_profile'"
  ." LEFT JOIN {og_uid} o ON v.nid = o.nid AND o.is_admin = 1"
  ." LEFT JOIN {node} f ON f.uid = o.uid AND f.uid != lr.uid AND f.uid != 0 AND f.type = 'individual_profile'"
  ." WHERE v.type = 'village' AND v.status = 1";

  $result = db_query($query);

  $villages = array();
  while ($row = db_fetch_array($result)) {
    if ($csv) {
      $villages[$row['village_nid']]['title'] = $row['village_title'];
      $villages[$row['village_nid']]['local_rep'] = $row['local_rep_title'];
      $villages[$row['village_nid']]['facilitator'] .= ($villages[$row['village_nid']]['facilitator'] && $row['facilitator_title'] != '') ? ', ' : '';
      $villages[$row['village_nid']]['facilitator'] .= $row['facilitator_title'];
    }
    else {
      $villages[$row['village_nid']]['title'] = l($row['village_title'], 'node/'. $row['village_nid']);
      $villages[$row['village_nid']]['local_rep'] = l($row['local_rep_title'], 'node/'. $row['local_rep_nid']);
      $villages[$row['village_nid']]['facilitator'] .= ($villages[$row['village_nid']]['facilitator'] && $row['facilitator_title'] != '') ? ', ' : '';
      $villages[$row['village_nid']]['facilitator'] .= $row['facilitator_title'] != '' ? l($row['facilitator_title'], 'node/'. $row['facilitator_nid']) : '';
    }
  }

  if ($csv) {
    foreach ($villages as $village) {
      $output .= implode(', ', $village) ."\n";
    }
    drupal_set_header('Content-Type: text/csv');
    print $output;
    exit;
  }
  else {
    $output .= theme('table', $header, $villages);
  }

  return $output;
}

/**
 * Configuration options for nabuur stats.
 */
function nabuur_stats_settings() {
  $form = array();
  $form['nabuur_stats_refresh'] = array(
    '#type' => 'select',
    '#title' => t('Refresh rate'),
    '#options' => drupal_map_assoc(array(0, 60, 300, 600, 1800, 3200, 6400), 'format_interval'),
    '#description' => t('Select how often to refresh the statistics - will only be refreshed when cron (cron.php) runs.'),
    '#default_value' => variable_get('nabuur_stats_refresh', 60 * 60),
  );
  return system_settings_form($form);
}

/**
 * Implementation of hook_block.
 */
function nabuur_stats_block($op = 'list', $delta = 0) {
  switch ($op) {
    case 'list':
      $blocks = array();

      $blocks[0]['info'] = t('Nabuur stats');
      // Auto-enable the group blocks for fresh installations.
      $blocks[0]['status'] = 1;
      $blocks[0]['weight'] = 0;

      $blocks[1]['info'] = t('Worldschool messages');
      $blocks[1]['weight'] = 0;

      return $blocks;
      break;
    case 'view':
    switch ($delta) {
      case 0:
        if (user_access('access content')) {
          $block['subject'] = t('NABUUR today');
          $stats = nabuur_stats_get();
          $block['content'] = theme('nabuur_stats', $stats);
          return $block;
        }
      case 1:
        return nabuur_stats_block_worldschool_students();
      }
      break;
  }
}

/**
 * Implementation of hook_cron.
 * Checks for updates.
 */
function nabuur_stats_cron() {
  $refresh = variable_get('nabuur_stats_refresh', 3200);
  if (variable_get('nabuur_stats_updated', 0) + $refresh < time()) {
    nabuur_stats_set();
    variable_set('nabuur_stats_updated', time());
  }
}

/**
 * Updates stats.
 */
function nabuur_stats_set() {
  $sql = array(
    'users' => 'SELECT count(uid) FROM users',
    'villages' => "SELECT count(n.nid) FROM {node} n INNER JOIN {node_access} a ON n.nid = a.nid WHERE n.type = 'village' and a.realm = 'og_public'",
    'groups' => "SELECT count(n.nid) FROM {node} n INNER JOIN {node_access} a ON n.nid = a.nid WHERE n.type='group' and a.realm = 'og_public'",
    'tasks' => "SELECT count(nid) FROM node WHERE type='task'",
    'months_news' => "SELECT count(nid) FROM node WHERE type='news_item' && created > UNIX_TIMESTAMP(DATE_SUB(CURDATE(),INTERVAL 30 DAY))",
  );
  $stats = array();

  foreach ($sql as $key => $query) {
    $stats[$key] = db_result(db_query($query));
  }

  variable_set('nabuur_stats_data', $stats);
  return $stats;
}

/**
 * Returns stats.
 */
function nabuur_stats_get() {
  $stats = variable_get('nabuur_stats_data', array());
  if (! count($stats)) {
    $stats = nabuur_stats_set();
  }

  // add users online
  $interval = time() - variable_get('user_block_seconds_online', 900); // users module time setting
  // from sess_count() but both anon and logged in - removing the uid * 0 
  $stats['online'] = db_result(db_query('SELECT COUNT(sid) AS count FROM {sessions} WHERE timestamp >= %d', $interval));
  return $stats;
}

/**
 * Theme nabuurs stats block content
 *
 * @group themeable
 */
function theme_nabuur_stats($stats) {
  $users = l(t('@users Neighbours', array('@users' => $stats['users'])), '/search/user');
  $online = t('@online visitors at this moment.', array('@online' => $stats['online']));
  $villages = l(t('@villages Villages', array('@villages' => $stats['villages'])), 'village');
  $groups = l(t('@groups groups', array('@groups' => $stats['groups'])), 'group');
  $tasks = l(t('@tasks ways you can help', array('@tasks' => $stats['tasks'])), 'search/node/results/content_type%3Atask');
  $this_month = l(t('@news stories told this month', array('@news' => $stats['months_news'])), 'news');

  $output = '<p class="stats">';
  $output .= t('<span class="stats-neighbours">!neighbours,</span> <span class="stats-villages">!villages,</span> <span class="stats-groups">!groups,</span> <span class="stats-tasks">!tasks,</span> <span class="stats-stories">!this_month</span> with <span class="stats-online">@online</span>', array('!neighbours' => $users, '@online' => $online, '!villages' => $villages, '!groups' => $groups, '!tasks' => $tasks, '!this_month' => $this_month));
  $output .= '</p>';

  return $output;
}

/**
 * Report worldschool students and their posts in worldschool villages
 *
 * @group themeable
 */
function nabuur_stats_report_worldschool_students() {
  $all = arg(5) == 'all' ? TRUE : FALSE;
  if ($all) {
    $csv = arg(6) == 'csv' ? TRUE : FALSE;
    $path = 'admin/logs/nabuur/worldschool/students/all/csv';
    $other_page = '<p>'. l(t('Here is the page with messages in worldschool villages.'), 'admin/logs/nabuur/worldschool/students') .'</p>';
  }
  else {
    $csv = arg(5) == 'csv' ? TRUE : FALSE;
    $path = 'admin/logs/nabuur/worldschool/students/csv';
    $other_page = '<p>'. l(t('Here is the page with messages in ALL villages.'), 'admin/logs/nabuur/worldschool/students/all') .'</p>';
  }
  if ($csv) {
    $output = "'student', 'village', 'post', 'post date', 'post'\n";
  }
  else {
    $output = '<p>'. t('List of worldschool students and their posts in (worldschool) villages.'). '</p>';
    $output .= '<p>'. l(t('Download as CSV file.'), $path) .' '. t('This can be opened in a speadsheet with commas seperating the columns.') .'</p>'; // drupal table output...
    $output .= $other_page;
    $header = array('student', 'village', 'post', 'post date', 'post');
  }  

  $students = _nabuur_stats_report_worldschool_students($all, $csv);

  if ($csv) {
    foreach ($students as $student) {
      $output .= implode(', ', $student) ."\n";
    }
    drupal_set_header('Content-Type: text/csv');
    print $output;
    exit;
  }
  else {
    $output .= theme('table', $header, $students);
  }

  return $output;
}

function nabuur_stats_report_worldschool_students_page() {
  $header = array(array('data' => 'student', 'class' => 'ws_student'), 
                  array('data' => 'village', 'class' => 'ws_village'), 
                  array('data' => 'post', 'class' => 'ws_post'),
                  array('data' => 'post date', 'class' => 'ws_date'),
                 );
// add a page back function
  $output = '<p>
             <FORM><INPUT type="button" value="Back to NABUUR 4 Students group" onClick="history.back()"></FORM>
             </p>';  

  $students = _nabuur_stats_report_worldschool_students(TRUE, FALSE, FALSE);
  $output .= theme('table', $header, $students);

  return $output;
}


function nabuur_stats_block_worldschool_students() {
  $arg2 = arg(2);
  if ((arg(1) != 29305) && empty($arg2)) {
    return NULL;
  }
  $header = array('student', 'village', 'post', 'post date');

  $students = _nabuur_stats_report_worldschool_students(TRUE, FALSE, FALSE);
// We only need first 5 here
  $students_5 = array_slice($students, 0, 5);

  $block['content'] = theme('table', $header, $students_5);
  $block['content'] .= '<div class="views_more" align="right"><ul><li>'.
                         l(t(more), 'nabuur/students')
                         ."</li></ul></div>";

  return $block;
}

/**
 * Help function for report worldschool students and their posts in worldschool villages
 *
 * @group themeable
 */
function _nabuur_stats_report_worldschool_students($all = FALSE, $csv = FALSE, $logs = TRUE) {
// Get worldschool students
  $query = "SELECT node.title as user_realname, user.uid AS user_uid, user.name AS user_account, user.created as user_created FROM node node
            LEFT JOIN flag_content flag_content_worldschool 
              ON node.nid = flag_content_worldschool.content_id 
              AND flag_content_worldschool.fid = '2'
            LEFT JOIN users user ON user.uid = node.uid
            WHERE ( flag_content_worldschool.uid IS NOT NULL ) 
              AND ( node.type IN ( 'individual_profile' ) )";

  $result = db_query($query);

  $users = array();
  $user_nids = "";
  while ($row = db_fetch_array($result)) {
    if ($csv) {
      $users[$row['user_uid']]['realname'] = $row['user_realname'];
//      $users[$row['user_nid']]['created'] = $row['user_created'];
    }
    else {
      $users[$row['user_uid']]['realname'] = l($row['user_realname'], 'user/'. $row['user_uid'] .'/profile');
//      $users[$row['user_nid']]['created'] = $row['user_created'];
    }
    if ($user_uids == "") {
      $user_uids = $row['user_uid'];
    }
    else {
      $user_uids .= ", ". $row['user_uid'];
    }
  }

// distinguish between post in all villages or only worldschool villages 
  if ( $all ) {
    $join = "";
    $where = " WHERE node.type IN ( 'village' ) ";
  }
  else {
    $join = " LEFT JOIN flag_content flag_content_worldschool 
                ON node.nid = flag_content_worldschool.content_id 
                AND flag_content_worldschool.fid = '2' ";
    $where = " WHERE node.type IN ( 'village' ) 
                 AND flag_content_worldschool.uid IS NOT NULL ";
  }
// Get villages
  $query = "SELECT node.title as village_name, node.nid AS village_nid FROM node node ". $join . $where;

  $result = db_query($query);

  $villages = array();
  $village_nids = "";
  while ($row = db_fetch_array($result)) {
    if ($csv) {
      $villages[$row['village_nid']]['village_name'] = $row['village_name'];
    }
    else {
      $villages[$row['village_nid']]['village_name'] = l($row['village_name'], 'node/'. $row['village_nid']);
    }
    if ($village_nids == "") {
      $village_nids = $row['village_nid'];
    }
    else {
      $village_nids .= ", ". $row['village_nid'];
    }
  }

  $join = " JOIN og_ancestry oa ON oa.nid = node.nid
            JOIN node_revisions nrev ON nrev.nid = node.nid ";
  $where = " WHERE node.type IN ( 'task_discussion' )
               AND node.uid IN ( ". $user_uids . " ) ";
// distinguish between post in all villages or only worldschool villages 
  if ( ! $all ) {
    $where .= " AND oa.group_nid IN ( ". $village_nids ." ) ";
  }

// Get task_discussions from worldschool students in worldschool villages
  $query = "SELECT node.uid AS post_uid, node.title as post_title, nrev.body AS post_body, 
              node.nid AS post_nid, node.created AS post_created, oa.group_nid AS post_village_nid FROM node node ". 
              $join . $where ." ORDER BY node.created DESC"; 

  $result = db_query($query);

  $students = array();
  while ($row = db_fetch_array($result)) {
    if ($csv) {
      $students[$row['post_nid']]['realname'] = $users[$row['post_uid']]['realname'];
      $students[$row['post_nid']]['village_name'] = $villages[$row['post_village_nid']]['village_name'];
      // $students[$row['post_nid']]['task_title'] = "Not yet.....";
      $students[$row['post_nid']]['post_title'] = $row['post_title'];
      $students[$row['post_nid']]['post_created'] = format_date($row['post_created'], 'custom', 'd/M/Y');
      if ($logs) {
        $students[$row['post_nid']]['post_body'] = check_markup($row['post_body'], $format = FILTER_FORMAT_DEFAULT, $check = FALSE);
      }
    }
    else {
      $students[$row['post_nid']]['realname'] = $users[$row['post_uid']]['realname'];
      $students[$row['post_nid']]['village_name'] = $villages[$row['post_village_nid']]['village_name'];
      // $students[$row['post_nid']]['task_title'] = "Not yet.....";
      $students[$row['post_nid']]['post_title'] = l($row['post_title'], 'node/'. $row['post_nid']);;
      $students[$row['post_nid']]['post_created'] = format_date($row['post_created'], 'custom', 'd/M/Y');
      if ($logs) {
        $students[$row['post_nid']]['post_body'] = check_markup($row['post_body'], $format = FILTER_FORMAT_DEFAULT, $check = FALSE);
      }
    }
  }

  return $students;
}
